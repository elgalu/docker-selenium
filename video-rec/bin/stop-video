#!/usr/bin/env bash

# set -e: exit asap if a command exits with a non-zero status
set -e

echoerr() { printf "%s\n" "$*" >&2; }

# print error and exit
die () {
  echoerr "ERROR: $1"
  # if $2 is defined AND NOT EMPTY, use $2; otherwise, set to "15"
  errnum=${2-15}
  exit $errnum
}

# if $1 is defined AND NOT EMPTY, use $1; otherwise, set to "20s"
WAIT_TIME_OUT_VIDEO_STOP=${1-20s}
LOOP_SCRIPT_PATH="${BIN_UTILS}/wait-stop-video-rec.sh"

if [ ! -f "${LOOP_SCRIPT_PATH}" ]; then
  die "Need '${LOOP_SCRIPT_PATH}' to exist!"
fi

#----------------------
# Stop video recording
#----------------------
export VIDEO=false
supervisorctl -c /etc/supervisor/supervisord.conf stop video-rec

# Avoid waiting forever using the `timeout` command
if timeout --foreground ${WAIT_TIME_OUT_VIDEO_STOP} \
     ${LOOP_SCRIPT_PATH}; then
  echo "Video recording stopped"
else
  bash -c 'tail --lines=${TAIL_LOG_LINES} /var/log/cont/video-rec/*' || true
  echo "" && echo "" && echo "==> errors <=="
  bash -c 'errors' || true

  die "Were unable to stop video recording within '${WAIT_TIME_OUT_VIDEO_STOP}'"
fi

sed -i -e "s/\r/\n/g" ${LOGS_DIR}/video-rec-stderr.log || true
sed -i -e "s/\r/\n/g" ${LOGS_DIR}/video-rec-stdout.log || true

# Include videos log in the output
log "-- DEBUG: video-rec-stdout.log ----"
tail -n 40 ${LOGS_DIR}/video-rec-stdout.log || true

log "-- DEBUG: video-rec-stderr.log ----"
tail -n 40 ${LOGS_DIR}/video-rec-stderr.log || true
